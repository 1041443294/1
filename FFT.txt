`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2022/11/27 17:27:05
// Design Name: 
// Module Name: fft_top
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module fft_top(
	input wire rst_n,
	input wire ad_clk,
	input wire [7:0] ad_data,
	
	//fifo1
    output reg [7:0] din_data1  ,
    output reg wr_en_data1      ,
    output reg rd_en_data1      ,
    output wire [7:0] dout_data1,
    output wire full_data1      ,
    output wire empty_data1     ,
	//fifo1
    output reg [7:0] din_data2  ,
    output reg wr_en_data2      ,
    output reg rd_en_data2      ,
    output wire [7:0] dout_data2,
    output wire full_data2      ,
    output wire empty_data2     ,    
	
	//fft
    input wire fft_clk,
	input wire fft_en,
	output wire [15:0] fft_xk,//fft采样位置
	output wire [47:0] fft_value,//fft幅值
	output reg [15:0] rx_fft_cnt,
	output reg [15:0] tx_fft_cnt,
	output wire fft_data_valid,
    output wire event_frame_started,
    output wire event_tlast_unexpected,
    output wire event_tlast_missing,
    output wire event_status_channel_halt,
    output wire event_data_in_channel_halt,
    output wire event_data_out_channel_halt	
);
localparam FFT_POINT = 16'd8192;//fft采样点数
localparam FFT_CALC_POINT =16'd1048;
//fifo
//reg [7:0] din_data1;
//reg wr_en_data1;
//reg rd_en_data1;
//wire [7:0] dout_data1;
//wire full_data1;
//wire empty_data1;
wire wr_rst_busy_data1;
wire rd_rst_busy_data1;
wire prog_empty_data1;
wire prog_empty_data2;


//reg [7:0] din_data2;
//reg wr_en_data2;
//reg rd_en_data2;
//wire [7:0] dout_data2;
//wire full_data2;
//wire empty_data2;
wire wr_rst_busy_data2;
wire rd_rst_busy_data2;

wire [12:0] prog_empty_thresh;
assign prog_empty_thresh = 13'd8184;

reg	[7:0] s_axis_config_tdata;
reg	s_axis_config_tvalid;
wire s_axis_config_tready;


reg [15:0] s_axis_data_tdata;
reg	s_axis_data_tvalid;
wire s_axis_data_tready;
wire s_axis_data_tlast;

wire [47:0] m_axis_data_tdata;
wire [15:0] m_axis_data_tuser;
wire m_axis_data_tvalid;
reg	m_axis_data_tready = 1;
wire m_axis_data_tlast;
assign fft_data_valid=m_axis_data_tvalid;//my
//wire event_frame_started;
//wire event_tlast_unexpected;
//wire event_tlast_missing;
//wire event_status_channel_halt;
//wire event_data_in_channel_halt;
//wire event_data_out_channel_halt;

//rx
reg [2:0] rx_c_state;
reg [2:0] rx_n_state;

localparam rx_idle 			= 3'd0;
localparam rx_data1_wait	= 3'd1;
localparam rx_data1 		= 3'd2;
localparam rx_data2_wait 	= 3'd3;
localparam rx_data2 		= 3'd4;
localparam rx_end 			= 3'd5;

//reg [15:0] rx_fft_cnt;

reg fft_en_r1;
reg fft_en_r2;

wire fft_en_rising;
wire fft_en_falling;
assign fft_en_rising = ~fft_en_r2 && fft_en_r1;
assign fft_en_falling = fft_en_r2 && ~fft_en_r1;

always@(posedge ad_clk) begin
	if(~rst_n) begin
		fft_en_r1 <= 1'b0;
		fft_en_r2 <= 1'b0;
	end
	else begin
		fft_en_r1 <= fft_en;
		fft_en_r2 <= fft_en_r1;
	end
end

always@(posedge ad_clk) begin
	if(~rst_n) begin
		rx_c_state <= rx_idle;
	end
	else begin
		rx_c_state <= rx_n_state;
	end
end

always@(*) begin
	case(rx_c_state)
		rx_idle: begin
			if(s_axis_config_tready && ~wr_rst_busy_data1 && ~wr_rst_busy_data2) begin
				rx_n_state = rx_data1_wait;
			end
			else begin
				rx_n_state = rx_idle;
			end
		end
		
		rx_data1_wait: begin
			if(fft_en_rising) begin
				rx_n_state = rx_data1;
			end
			else begin
				rx_n_state = rx_data1_wait;
			end
		end
		
		rx_data1: begin
			if(rx_fft_cnt == FFT_POINT - 16'd1) begin
				rx_n_state = rx_data2_wait;
			end
			else begin
				rx_n_state = rx_data1;
			end
		end
		
		rx_data2_wait: begin
			if(fft_en_falling) begin
				rx_n_state = rx_data2;
			end
			else begin
				rx_n_state = rx_data2_wait;
			end
		end
		
		rx_data2: begin
			if(rx_fft_cnt == FFT_POINT - 16'd1) begin
				rx_n_state = rx_end;
			end
			else begin
				rx_n_state = rx_data2;
			end
		end
		
		rx_end: begin
			rx_n_state = rx_data1_wait;
		end
		
		default: begin
			rx_n_state = rx_idle;
		end
		
	endcase
end

always@(posedge ad_clk) begin
	if(~rst_n) begin
		rx_fft_cnt <= 16'd0;
	end
	else begin
		case(rx_c_state)
			rx_data1: begin
				rx_fft_cnt <= rx_fft_cnt + 16'd1;
			end
			
			rx_data2: begin
				rx_fft_cnt <= rx_fft_cnt + 16'd1;
			end
			
			default: begin
				rx_fft_cnt <= 16'd0;
			end
		endcase
	end
end

always@(posedge ad_clk) begin
	if(~rst_n) begin
		wr_en_data1 <= 1'b0;
		wr_en_data2 <= 1'b0;
		din_data1 <= 8'h0;
		din_data2 <= 8'h0;
	end
	else begin
		case(rx_c_state)
			rx_data1: begin
				wr_en_data1 <= 1'b1;
				wr_en_data2 <= 1'b0;
				din_data1 <= ad_data;
				din_data2 <= 8'h0;
			end
			
			rx_data2: begin
				wr_en_data1 <= 1'b0;
				wr_en_data2 <= 1'b1;
				din_data1 <= 8'h0;
				din_data2 <= ad_data;
			end
			
			default: begin
				wr_en_data1 <= 1'b0;
				wr_en_data2 <= 1'b0;
				din_data1 <= 8'h0;
				din_data2 <= 8'h0;
			end
		endcase
	end
end

fifo_generator_0 fifo_8x8192_bram_inst1(
    .rst 				(~rst_n),               // input wire rst                              
    .wr_clk 			(ad_clk),               // input wire wr_clk                         
    .rd_clk 			(fft_clk),              // input wire rd_clk                         
    .din 				(din_data1),            // input wire [7 : 0] din                    
    .wr_en 				(wr_en_data1),          // input wire wr_en                          
    .rd_en 				(rd_en_data1),          // input wire rd_en                          
    .dout 				(dout_data1),           // input wire [12 : 0] prog_empty_thresh     
    .full 				(full_data1),           // output wire [7 : 0] dout                  
	.prog_empty_thresh	(prog_empty_thresh),    // output wire full                          
	.prog_empty			(prog_empty_data1),     // output wire empty                         
    .empty 				(empty_data1),          // output wire prog_empty                    
	.wr_rst_busy		(wr_rst_busy_data1),    // output wire wr_rst_busy                   
	.rd_rst_busy		(rd_rst_busy_data1)    // output wire rd_rst_busy                    
);

fifo_generator_0 fifo_8x8192_bram_inst2(
    .rst 				(~rst_n),              // input wire rst                            
    .wr_clk 			(ad_clk),              // input wire wr_clk                         
    .rd_clk 			(fft_clk),             // input wire rd_clk                         
    .din 				(din_data2),           // input wire [7 : 0] din                    
    .wr_en 				(wr_en_data2),         // input wire wr_en                          
    .rd_en 				(rd_en_data2),         // input wire rd_en                          
    .dout 				(dout_data2),          // input wire [12 : 0] prog_empty_thresh     
    .full 				(full_data2),          // output wire [7 : 0] dout                  
	.prog_empty_thresh	(prog_empty_thresh),   // output wire full                          
	.prog_empty			(prog_empty_data2),    // output wire empty                         
    .empty 				(empty_data2),         // output wire prog_empty                    
	.wr_rst_busy		(wr_rst_busy_data2),   // output wire wr_rst_busy                   
	.rd_rst_busy		(rd_rst_busy_data2)   // output wire rd_rst_busy                    
);

//rx
reg [2:0] tx_c_state;
reg [2:0] tx_n_state;

localparam tx_idle 			= 3'd0;
localparam tx_data1_wait 	= 3'd1;
localparam tx_data1 		= 3'd2;
localparam tx_data2_wait 	= 3'd3;
localparam tx_data2 		= 3'd4;
localparam tx_end 			= 3'd5;

//reg [15:0] tx_fft_cnt;

always@(posedge fft_clk) begin
	if(~rst_n) begin
		tx_c_state <= tx_idle;
	end
	else begin
		tx_c_state <= tx_n_state;
	end
end

always@(*) begin
	case(tx_c_state)
		tx_idle: begin
			if(s_axis_config_tready && ~rd_rst_busy_data1 && ~rd_rst_busy_data2) begin
				tx_n_state = tx_data1_wait;
			end
			else begin
				tx_n_state = tx_idle;
			end
		end
		
		tx_data1_wait: begin
			if(~prog_empty_data1) begin
				tx_n_state = tx_data1;
			end
			else begin
				tx_n_state = tx_data1_wait;
			end
		end
		
		tx_data1: begin
			if(tx_fft_cnt == FFT_POINT - 16'd1) begin
				tx_n_state = tx_data2_wait;
			end
			else begin
				tx_n_state = tx_data1;
			end
		end
		
		tx_data2_wait: begin
			if(~prog_empty_data2) begin
				tx_n_state = tx_data2;
			end
			else begin
				tx_n_state = tx_data2_wait;
			end
		end
		
		tx_data2: begin
			if(tx_fft_cnt == FFT_POINT - 16'd1) begin
				tx_n_state = tx_end;
			end
			else begin
				tx_n_state = tx_data2;
			end
		end
		
		tx_end: begin
			tx_n_state = tx_data1_wait;
		end
		
		default: begin
			tx_n_state = tx_idle;
		end
	endcase
end

always@(posedge fft_clk) begin
	if(~rst_n) begin
		s_axis_config_tvalid <= 1'b0;
		s_axis_config_tdata <= 8'b0;
	end
	else begin
		case(tx_c_state)
			tx_idle: begin
				if(s_axis_config_tready && ~rd_rst_busy_data1 && ~rd_rst_busy_data2) begin
					s_axis_config_tvalid <= 1'b1;
					s_axis_config_tdata <= 8'b1;
				end
				else begin
					s_axis_config_tvalid <= 1'b0;
					s_axis_config_tdata <= 8'b0;
				end
			end
			
			default: begin
				s_axis_config_tvalid <= 1'b0;
				s_axis_config_tdata <= 8'b0;
			end
			
		endcase
	end
end

always@(posedge fft_clk) begin
	if(~rst_n) begin
		tx_fft_cnt <= 16'd0;
	end
	else begin
		case(tx_c_state)
			tx_data1: begin
				tx_fft_cnt <= tx_fft_cnt + 16'd1;
			end
			
			tx_data2: begin
				tx_fft_cnt <= tx_fft_cnt + 16'd1;
			end
			
			default: begin
				tx_fft_cnt <= 16'd0;
			end
		endcase
	end
end

always@(posedge fft_clk) begin
	if(~rst_n) begin
		rd_en_data1 <= 1'b0;
		rd_en_data2 <= 1'b0;
	end
	else begin
		case(tx_c_state)
			tx_data1: begin
				rd_en_data2 <= 1'b0;
				if(tx_fft_cnt <= FFT_POINT - 16'd1) begin
					rd_en_data1 <= 1'b1;
				end
				else begin
					rd_en_data1 <= 1'b0;
				end
			end

			tx_data2: begin
				rd_en_data1 <= 1'b0;
				if(tx_fft_cnt <= FFT_POINT - 16'd1) begin
					rd_en_data2 <= 1'b1;
				end
				else begin
					rd_en_data2 <= 1'b0;
				end
			end
			
			default: begin
				rd_en_data1 <= 1'b0;
				rd_en_data2 <= 1'b0;
			end
		endcase
	end
end

reg rd_en_data1_r1;
reg rd_en_data2_r1;
wire rd_en_data1_falling;
wire rd_en_data2_falling;

assign rd_en_data1_falling = rd_en_data1_r1 && ~rd_en_data1;
assign rd_en_data2_falling = rd_en_data2_r1 && ~rd_en_data2;

always@(posedge fft_clk) begin
	if(~rst_n) begin
		rd_en_data1_r1 <= 1'b0;
		rd_en_data2_r1 <= 1'b0;
	end
	else begin
		rd_en_data1_r1 <= rd_en_data1;
		rd_en_data2_r1 <= rd_en_data2;
	end
end

assign s_axis_data_tlast = rd_en_data1_falling || rd_en_data2_falling;

always@(posedge fft_clk) begin
	if(~rst_n) begin
		s_axis_data_tvalid <= 1'b0;
		s_axis_data_tdata <= 16'h0;
	end
	else begin
		s_axis_data_tvalid <= rd_en_data1 || rd_en_data2;
		if(rd_en_data1) begin
			s_axis_data_tdata <= {8'h0,dout_data1};
		end
		else if(rd_en_data2) begin
			s_axis_data_tdata <= {8'h0,dout_data2};
		end
		else begin
			s_axis_data_tdata <= 16'h0;
		end
	end
end
			
xfft_0 u_fft(
    .aclk							(fft_clk),                       // input wire aclk                            
    .s_axis_config_tdata			(s_axis_config_tdata),           // input wire [7 : 0] s_axis_config_tdata     
    .s_axis_config_tvalid			(s_axis_config_tvalid),          // input wire s_axis_config_tvalid            
    .s_axis_config_tready			(s_axis_config_tready),          // output wire s_axis_config_tready           
    .s_axis_data_tdata				(s_axis_data_tdata),             // input wire [15 : 0] s_axis_data_tdata      
    .s_axis_data_tvalid				(s_axis_data_tvalid),            // input wire s_axis_data_tvalid              
    .s_axis_data_tready				(s_axis_data_tready),            // output wire s_axis_data_tready             
    .s_axis_data_tlast				(s_axis_data_tlast),             // input wire s_axis_data_tlast               
    .m_axis_data_tdata				(m_axis_data_tdata),             // output wire [47 : 0] m_axis_data_tdata     
    .m_axis_data_tuser				(m_axis_data_tuser),             // output wire [15 : 0] m_axis_data_tuser     
    .m_axis_data_tvalid				(m_axis_data_tvalid),            // output wire m_axis_data_tvalid             
    .m_axis_data_tready				(m_axis_data_tready),            // input wire m_axis_data_tready              
    .m_axis_data_tlast				(m_axis_data_tlast),             // output wire m_axis_data_tlast              
    .event_frame_started			(event_frame_started),           // output wire event_frame_started            
    .event_tlast_unexpected			(event_tlast_unexpected),        // output wire event_tlast_unexpected         
    .event_tlast_missing			(event_tlast_missing),           // output wire event_tlast_missing            
    .event_status_channel_halt		(event_status_channel_halt),     // output wire event_status_channel_halt      
    .event_data_in_channel_halt		(event_data_in_channel_halt),    // output wire event_data_in_channel_halt     
    .event_data_out_channel_halt	(event_data_out_channel_halt)   // output wire event_data_out_channel_halt     
);

wire [21:0] m_axis_data_tdata_re;
wire [21:0] m_axis_data_tdata_im;
wire [15:0] fft_index;
assign	m_axis_data_tdata_re = m_axis_data_tdata[21:0];
assign	m_axis_data_tdata_im = m_axis_data_tdata[45:24];
assign	fft_index  = m_axis_data_tuser[15:0];

reg [21:0] fft_re;
reg [21:0] fft_im;
reg [43:0] fft_re2;
reg [43:0] fft_im2;
reg [44:0] fft_mod;

always@(posedge fft_clk) begin
	if(~rst_n) begin
		fft_re <= 19'd0;
		fft_re2 <= 38'd0;
	end
	else begin
		fft_re2 <= fft_re * fft_re;
		if((m_axis_data_tvalid) && (fft_index > 16'd0) && (fft_index <= FFT_CALC_POINT)) begin//4096
			if(m_axis_data_tdata_re[21]) begin
				fft_re <= (~m_axis_data_tdata_re) + 22'd1;
			end
			else begin
				fft_re <= m_axis_data_tdata_re;
			end
		end
		else begin
			fft_re <= fft_re;
		end
	end
end

always@(posedge fft_clk) begin
	if(~rst_n) begin
		fft_im <= 19'd0;
		fft_im2 <= 38'd0;
	end
	else begin
		fft_im2 <= fft_im * fft_im;
		if((m_axis_data_tvalid) && (fft_index > 16'd0) && (fft_index <= FFT_CALC_POINT)) begin
			if(m_axis_data_tdata_im[21]) begin
				fft_im <= (~m_axis_data_tdata_im) + 22'd1;
			end
			else begin
				fft_im <= m_axis_data_tdata_im;
			end
		end
		else begin
			fft_im <= fft_im;
		end
	end
end
	
always@(posedge fft_clk) begin
	if(~rst_n) begin
		fft_mod	<= 48'd0;
	end
	else begin
		if((m_axis_data_tvalid) && (fft_index > 16'd0)&&(fft_index <= FFT_CALC_POINT)) begin
			fft_mod	<= fft_re2 + fft_im2; 
		end
		else begin
			fft_mod	<= fft_mod;
		end 
	end
end

reg [15:0] fft_index_r1;
reg [15:0] fft_index_r2;
reg [15:0] fft_index_r3;
reg [15:0] fft_index_r4;

always@(posedge fft_clk) begin
	if(~rst_n) begin
		fft_index_r1 <= 16'd0;
		fft_index_r2 <= 16'd0;
		fft_index_r3 <= 16'd0;
		fft_index_r4 <= 16'd0;
	end
	else begin
		if(m_axis_data_tvalid) begin
			fft_index_r1 <= fft_index;
			fft_index_r2 <= fft_index_r1;
			fft_index_r3 <= fft_index_r2;
			fft_index_r4 <= fft_index_r3;
		end
		else begin
			fft_index_r1 <= fft_index_r1;
			fft_index_r2 <= fft_index_r2;
			fft_index_r3 <= fft_index_r3;
			fft_index_r4 <= fft_index_r4;
		end
	end
end
	
assign fft_xk = fft_index_r4;
assign fft_value = {3'h0,fft_mod};

endmodule
